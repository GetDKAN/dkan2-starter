'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _StepsBlock = require('./StepsBlock');

var _StepsBlock2 = _interopRequireDefault(_StepsBlock);

var _StatBlock = require('./StatBlock');

var _StatBlock2 = _interopRequireDefault(_StatBlock);

var _Wrapper = require('./Wrapper');

var _Wrapper2 = _interopRequireDefault(_Wrapper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Blocks = function (_React$PureComponent) {
  _inherits(Blocks, _React$PureComponent);

  function Blocks() {
    _classCallCheck(this, Blocks);

    return _possibleConstructorReturn(this, (Blocks.__proto__ || Object.getPrototypeOf(Blocks)).apply(this, arguments));
  }

  _createClass(Blocks, [{
    key: 'render',
    value: function render() {
      var items = this.props.items;

      var Block = this.props.component;
      var paneTitle = this.props.paneTitle;

      if (paneTitle) {
        return _react2.default.createElement(
          _Wrapper2.default,
          { className: 'container-fluid ' + this.props.component.name },
          _react2.default.createElement(
            'h2',
            null,
            paneTitle
          ),
          _react2.default.createElement(
            'div',
            { className: 'pane-content' },
            this.props.items.map(function (item) {
              return _react2.default.createElement(Block, { content: item });
            })
          )
        );
      } else {
        return _react2.default.createElement(
          _Wrapper2.default,
          { className: 'container-fluid ' + this.props.component.name },
          _react2.default.createElement(
            'div',
            { className: 'pane-content' },
            this.props.items.map(function (item) {
              return _react2.default.createElement(Block, { content: item });
            })
          )
        );
      }
    }
  }]);

  return Blocks;
}(_react2.default.PureComponent);

Blocks.defaultProps = {
  items: []
};

Blocks.propTypes = {
  items: _propTypes2.default.any,
  component: _propTypes2.default.string
};

exports.default = Blocks;